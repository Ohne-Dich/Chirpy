// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refreshtokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refreshtokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
    $1, NOW(), NOW(), $2, $3
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refreshtokens WHERE token = $1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (Refreshtoken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i Refreshtoken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const setRevokeRefreshToken = `-- name: SetRevokeRefreshToken :exec
UPDATE refreshtokens
SET updated_at = NOW(),
revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) SetRevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, setRevokeRefreshToken, token)
	return err
}
